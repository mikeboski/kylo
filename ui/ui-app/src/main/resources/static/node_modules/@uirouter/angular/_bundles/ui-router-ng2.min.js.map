{
  "version": 3,
  "file": "ui-router-ng2.min.js",
  "sources": [
    "@uirouter/angular/statebuilders/views.ts",
    "@uirouter/angular/uiRouterConfig.ts",
    "@uirouter/angular/directives/uiSrefStatus.ts",
    "@uirouter/angular/uiRouterNgModule.ts",
    "@uirouter/angular/lazyLoad/lazyLoadNgModule.ts",
    "@uirouter/angular/statebuilders/lazyLoad.ts",
    "../node_modules/tslib/tslib.es6.js",
    "@uirouter/angular/providers.ts",
    "@uirouter/angular/mergeInjector.ts",
    "@uirouter/angular/directives/uiView.ts",
    "@uirouter/angular/directives/uiSref.ts",
    "@uirouter/angular/directives/uiSrefActive.ts",
    "@uirouter/angular/directives/directives.ts",
    "@uirouter/angular/location/locationService.ts",
    "@uirouter/angular/location/locationConfig.ts"
  ],
  "sourcesContent": [
    "/** @module ng2 */ /** */\nimport { isFunction, StateObject } from \"@uirouter/core\";\nimport {PathNode} from \"@uirouter/core\";\nimport {pick, forEach} from \"@uirouter/core\";\nimport {ViewConfig} from \"@uirouter/core\";\nimport {Ng2ViewDeclaration} from \"../interface\";\nimport {services} from \"@uirouter/core\";\nimport {ViewService} from \"@uirouter/core\";\n\n/**\n * This is a [[StateBuilder.builder]] function for Angular `views`.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * handles the `views` property with logic specific to @uirouter/angular.\n *\n * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object and\n * applies the state-level configuration to a view named `$default`.\n */\nexport function ng2ViewsBuilder(state: StateObject) {\n  let views: { [key: string]: Ng2ViewDeclaration } = {},\n      viewsObject = state.views || {\"$default\": pick(state, [\"component\", \"bindings\"])};\n\n  forEach(viewsObject, function (config: Ng2ViewDeclaration, name: string) {\n    name = name || \"$default\"; // Account for views: { \"\": { template... } }\n    if (isFunction(config)) config = { component: config as any };\n    if (Object.keys(config).length == 0) return;\n\n    config.$type = \"ng2\";\n    config.$context = state;\n    config.$name = name;\n\n    let normalized = ViewService.normalizeUIViewTarget(config.$context, config.$name);\n    config.$uiViewName = normalized.uiViewName;\n    config.$uiViewContextAnchor = normalized.uiViewContextAnchor;\n\n    views[name] = config;\n  });\n  return views;\n}\n\nlet id = 0;\nexport class Ng2ViewConfig implements ViewConfig {\n  $id: number = id++;\n  loaded: boolean = true;\n\n  constructor(public path: PathNode[], public viewDecl: Ng2ViewDeclaration) { }\n\n  load() {\n    return services.$q.when(this);\n  }\n}\n",
    "/** @module ng2 */ /** */\nimport { UIRouter, isFunction, StateObject } from \"@uirouter/core\";\nimport {StatesModule, RootModule} from \"./uiRouterNgModule\";\nimport {Injector} from \"@angular/core\";\nimport {isDefined} from \"@uirouter/core\";\n\nexport function applyModuleConfig(uiRouter: UIRouter, injector: Injector, module: StatesModule = {}): StateObject[] {\n  if (isFunction(module.config)) {\n    module.config(uiRouter, injector, module);\n  }\n\n  let states = module.states || [];\n  return states.map(state => uiRouter.stateRegistry.register(state));\n}\n\nexport function applyRootModuleConfig(uiRouter: UIRouter, injector: Injector, module: RootModule) {\n  isDefined(module.deferIntercept) && uiRouter.urlService.deferIntercept(module.deferIntercept);\n  isDefined(module.otherwise)      && uiRouter.urlService.rules.otherwise(module.otherwise);\n  isDefined(module.initial)        && uiRouter.urlService.rules.initial(module.initial);\n}\n\n\n",
    "/** @ng2api @module directives */\n/** */\nimport { Directive, Output, EventEmitter, ContentChildren, QueryList } from '@angular/core';\nimport { UISref } from './uiSref';\nimport {\n  PathNode, Transition, TargetState, StateObject, anyTrueR, tail, unnestR, Predicate, UIRouterGlobals, Param, PathUtils, StateOrName\n} from '@uirouter/core';\n\nimport { Subscription } from 'rxjs/Subscription';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport {of} from 'rxjs/observable/of';\nimport {fromPromise} from 'rxjs/observable/fromPromise';\nimport {combineLatest} from 'rxjs/observable/combineLatest';\nimport {switchMap} from 'rxjs/operator/switchMap';\nimport {map} from 'rxjs/operator/map';\nimport {concat} from 'rxjs/operator/concat';\n\n/** @internalapi */\ninterface TransEvt { evt: string; trans: Transition; }\n\n/**\n * UISref status emitted from [[UISrefStatus]]\n */\nexport interface SrefStatus {\n  /** The sref's target state (or one of its children) is currently active */\n  active: boolean;\n  /** The sref's target state is currently active */\n  exact: boolean;\n  /** A transition is entering the sref's target state */\n  entering: boolean;\n  /** A transition is exiting the sref's target state */\n  exiting: boolean;\n  /** The enclosed sref(s) target state(s) */\n  targetStates: TargetState[];\n}\n\n/** @internalapi */\nconst inactiveStatus: SrefStatus = {\n  active: false,\n  exact: false,\n  entering: false,\n  exiting: false,\n  targetStates: [],\n};\n\n/**\n * Returns a Predicate<PathNode[]>\n *\n * The predicate returns true when the target state (and param values)\n * match the (tail of) the path, and the path's param values\n *\n * @internalapi\n */\nconst pathMatches = (target: TargetState): Predicate<PathNode[]> => {\n  if (!target.exists()) return () => false;\n  let state: StateObject = target.$state();\n  let targetParamVals = target.params();\n  let targetPath: PathNode[] = PathUtils.buildPath(target);\n  let paramSchema: Param[] = targetPath.map(node => node.paramSchema)\n      .reduce(unnestR, [])\n      .filter((param: Param) => targetParamVals.hasOwnProperty(param.id));\n\n  return (path: PathNode[]) => {\n    let tailNode = tail(path);\n    if (!tailNode || tailNode.state !== state) return false;\n    let paramValues = PathUtils.paramValues(path);\n    return Param.equals(paramSchema, paramValues, targetParamVals);\n  };\n};\n\n/**\n * Given basePath: [a, b], appendPath: [c, d]),\n * Expands the path to [c], [c, d]\n * Then appends each to [a,b,] and returns: [a, b, c], [a, b, c, d]\n *\n * @internalapi\n */\nfunction spreadToSubPaths(basePath: PathNode[], appendPath: PathNode[]): PathNode[][] {\n  return appendPath.map(node => basePath.concat(PathUtils.subPath(appendPath, n => n.state === node.state)));\n}\n\n/**\n * Given a TransEvt (Transition event: started, success, error)\n * and a UISref Target State, return a SrefStatus object\n * which represents the current status of that Sref:\n * active, activeEq (exact match), entering, exiting\n *\n * @internalapi\n */\nfunction getSrefStatus(event: TransEvt, srefTarget: TargetState): SrefStatus {\n  const pathMatchesTarget = pathMatches(srefTarget);\n  const tc = event.trans.treeChanges();\n\n  let isStartEvent = event.evt === 'start';\n  let isSuccessEvent = event.evt === 'success';\n  let activePath: PathNode[] = isSuccessEvent ? tc.to : tc.from;\n\n  const isActive = () =>\n      spreadToSubPaths([], activePath)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExact = () =>\n      pathMatchesTarget(activePath);\n\n  const isEntering = () =>\n      spreadToSubPaths(tc.retained, tc.entering)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  const isExiting = () =>\n      spreadToSubPaths(tc.retained, tc.exiting)\n          .map(pathMatchesTarget)\n          .reduce(anyTrueR, false);\n\n  return {\n    active: isActive(),\n    exact: isExact(),\n    entering: isStartEvent ? isEntering() : false,\n    exiting: isStartEvent ? isExiting() : false,\n    targetStates: [srefTarget],\n  } as SrefStatus;\n}\n\n/** @internalapi */\nfunction mergeSrefStatus(left: SrefStatus, right: SrefStatus): SrefStatus {\n  return {\n    active: left.active || right.active,\n    exact: left.exact || right.exact,\n    entering: left.entering || right.entering,\n    exiting: left.exiting || right.exiting,\n    targetStates: left.targetStates.concat(right.targetStates),\n  };\n}\n\n/**\n * A directive which emits events when a paired [[UISref]] status changes.\n *\n * This directive is primarily used by the [[UISrefActive]] directives to monitor `UISref`(s).\n *\n * This directive shares two attribute selectors with `UISrefActive`:\n *\n * - `[uiSrefActive]`\n * - `[uiSrefActiveEq]`.\n *\n * Thus, whenever a `UISrefActive` directive is created, a `UISrefStatus` directive is also created.\n *\n * Most apps should simply use `UISrefActive`, but some advanced components may want to process the\n * [[SrefStatus]] events directly.\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatusChanged($event)\">\n *   <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n * </li>\n * ```\n *\n * The `uiSrefStatus` event is emitted whenever an enclosed `uiSref`'s status changes.\n * The event emitted is of type [[SrefStatus]], and has boolean values for `active`, `exact`, `entering`, and `exiting`; also has a [[StateOrName]] `identifier`value.\n *\n * The values from this event can be captured and stored on a component (then applied, e.g., using ngClass).\n *\n * ---\n *\n * A single `uiSrefStatus` can enclose multiple `uiSref`.\n * Each status boolean (`active`, `exact`, `entering`, `exiting`) will be true if *any of the enclosed `uiSref` status is true*.\n * In other words, all enclosed `uiSref` statuses  are merged to a single status using `||` (logical or).\n *\n * ```js\n * <li (uiSrefStatus)=\"onSrefStatus($event)\" uiSref=\"admin\">\n *   Home\n *   <ul>\n *     <li> <a uiSref=\"admin.users\">Users</a> </li>\n *     <li> <a uiSref=\"admin.groups\">Groups</a> </li>\n *   </ul>\n * </li>\n * ```\n *\n * In the above example, `$event.active === true` when either `admin.users` or `admin.groups` is active.\n *\n * ---\n *\n * This API is subject to change.\n */\n\nexport class UISrefStatus {\n  /** current statuses of the state/params the uiSref directive is linking to */\n   uiSrefStatus = new EventEmitter<SrefStatus>(false);\n  /** Monitor all child components for UISref(s) */\n   private _srefs: QueryList<UISref>;\n\n  /** The current status */\n  status: SrefStatus;\n\n  /** @internalapi */ private _subscription: Subscription;\n  /** @internalapi */ private _srefChangesSub: Subscription;\n  /** @internalapi */ private _srefs$: BehaviorSubject<UISref[]>;\n  /** @internalapi */ private _globals: UIRouterGlobals;\n  constructor(_globals: UIRouterGlobals) {\n    this._globals = _globals;\n    this.status = Object.assign({}, inactiveStatus);\n  }\n\n  ngAfterContentInit() {\n    // Map each transition start event to a stream of:\n    // start -> (success|error)\n    let transEvents$: Observable<TransEvt> = switchMap.call(this._globals.start$, (trans: Transition) => {\n      const event = (evt: string) => ({evt, trans} as TransEvt);\n\n      let transStart$ = of(event(\"start\"));\n      let transResult = trans.promise.then(() => event(\"success\"), () => event(\"error\"));\n      let transFinish$ = fromPromise(transResult);\n\n      return concat.call(transStart$, transFinish$);\n    });\n\n    // Watch the @ContentChildren UISref[] components and get their target states\n\n    // let srefs$: Observable<UISref[]> = of(this.srefs.toArray()).concat(this.srefs.changes);\n    this._srefs$ = new BehaviorSubject(this._srefs.toArray());\n    this._srefChangesSub = this._srefs.changes.subscribe(srefs => this._srefs$.next(srefs));\n\n    let targetStates$: Observable<TargetState[]> =\n        switchMap.call(this._srefs$, (srefs: UISref[]) =>\n            combineLatest<TargetState[]>(srefs.map(sref => sref.targetState$)));\n\n    // Calculate the status of each UISref based on the transition event.\n    // Reduce the statuses (if multiple) by or-ing each flag.\n    this._subscription = switchMap.call(transEvents$, (evt: TransEvt) => {\n      return map.call(targetStates$, (targets: TargetState[]) => {\n        let statuses: SrefStatus[] = targets.map(target => getSrefStatus(evt, target));\n        return statuses.reduce(mergeSrefStatus);\n      });\n    }).subscribe(this._setStatus.bind(this));\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) this._subscription.unsubscribe();\n    if (this._srefChangesSub) this._srefChangesSub.unsubscribe();\n    if (this._srefs$) this._srefs$.unsubscribe();\n    this._subscription = this._srefChangesSub = this._srefs$ = undefined;\n  }\n\n  private _setStatus(status: SrefStatus) {\n    this.status = status;\n    this.uiSrefStatus.emit(status);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uiSrefStatus],[uiSrefActive],[uiSrefActiveEq]',\n  exportAs: 'uiSrefStatus'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouterGlobals, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'uiSrefStatus': [{ type: Output, args: [\"uiSrefStatus\", ] },],\n'_srefs': [{ type: ContentChildren, args: [UISref, {descendants: true}, ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n",
    "/** @ng2api @module core */\n/** */\nimport { Ng2StateDeclaration } from \"./interface\";\nimport {\n  NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Provider, Injector, InjectionToken, APP_INITIALIZER, PLATFORM_ID,\n} from \"@angular/core\";\nimport { CommonModule, LocationStrategy, HashLocationStrategy, PathLocationStrategy, isPlatformServer } from \"@angular/common\";\nimport { _UIROUTER_DIRECTIVES } from \"./directives/directives\";\nimport { UIView } from \"./directives/uiView\";\nimport { UrlRuleHandlerFn, TargetState, TargetStateDef, UIRouter, TransitionService } from \"@uirouter/core\";\nimport { _UIROUTER_INSTANCE_PROVIDERS, _UIROUTER_SERVICE_PROVIDERS } from \"./providers\";\n\nimport { ROUTES } from \"@angular/router\";\n/** @hidden */ export const UIROUTER_ROOT_MODULE  = new InjectionToken(\"UIRouter Root Module\");\n/** @hidden */ export const UIROUTER_MODULE_TOKEN = new InjectionToken(\"UIRouter Module\");\n/** @hidden */ export const UIROUTER_STATES       = new InjectionToken(\"UIRouter States\");\n// /** @hidden */ export const ROUTES = UIROUTER_STATES;\n\n// Delay angular bootstrap until first transition is successful, for SSR.\n// See https://github.com/ui-router/angular/pull/127\nexport function onTransitionReady(transitionService: TransitionService, root: RootModule[]) {\n  let mod = root[0];\n  if (!mod || !mod.deferInitialRender) {\n    return () => Promise.resolve();\n  }\n\n  return () => new Promise(resolve => {\n    const hook = trans => { trans.promise.then(resolve, resolve); };\n    transitionService.onStart({}, hook, { invokeLimit: 1 });\n  });\n}\n\nexport function makeRootProviders(module: RootModule): Provider[] {\n    return [\n        { provide: UIROUTER_ROOT_MODULE,         useValue: module,              multi: true},\n        { provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true },\n        { provide: ROUTES,                       useValue: module.states || [], multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n        { provide: APP_INITIALIZER, useFactory: onTransitionReady, deps: [TransitionService, UIROUTER_ROOT_MODULE], multi: true },\n    ];\n}\n\nexport function makeChildProviders(module: StatesModule): Provider[] {\n    return [\n        { provide: UIROUTER_MODULE_TOKEN,        useValue: module,              multi: true },\n        { provide: ROUTES,                       useValue: module.states || [], multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: module.states || [], multi: true },\n    ];\n}\n\nexport function locationStrategy(useHash) {\n    return { provide: LocationStrategy, useClass: useHash ? HashLocationStrategy : PathLocationStrategy };\n}\n\n/**\n * Creates UI-Router Modules\n *\n * This class has two static factory methods which create UIRouter Modules.\n * A UI-Router Module is an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n * with support for UI-Router.\n *\n * ### UIRouter Directives\n *\n * When a UI-Router Module is imported into a `NgModule`, that module's components\n * can use the UIRouter Directives such as [[UIView]], [[UISref]], [[UISrefActive]].\n *\n * ### State Definitions\n *\n * State definitions found in the `states:` property are provided to the Dependency Injector.\n * This enables UI-Router to automatically register the states with the [[StateRegistry]] at bootstrap (and during lazy load).\n *\n * ### Entry Components\n *\n * Any routed components are added as `entryComponents:` so they will get compiled.\n */\n\nexport class UIRouterModule {\n  /**\n   * Creates a UI-Router Module for the root (bootstrapped) application module to import\n   *\n   * This factory function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * The `forRoot` module should be added to the `imports:` of the `NgModule` being bootstrapped.\n   * An application should only create and import a single `NgModule` using `forRoot()`.\n   * All other modules should be created using [[UIRouterModule.forChild]].\n   *\n   * Unlike `forChild`, an `NgModule` returned by this factory provides the [[UIRouter]] singleton object.\n   * This factory also accepts root-level router configuration.\n   * These are the only differences between `forRoot` and `forChild`.\n   *\n   * Example:\n   * ```js\n   * let routerConfig = {\n   *   otherwise: '/home',\n   *   states: [homeState, aboutState]\n   * };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     BrowserModule,\n   *     UIRouterModule.forRoot(routerConfig),\n   *     FeatureModule1\n   *   ]\n   * })\n   * class MyRootAppModule {}\n   *\n   * browserPlatformDynamic.bootstrapModule(MyRootAppModule);\n   * ```\n   *\n   * @param config declarative UI-Router configuration\n   * @returns an `NgModule` which provides the [[UIRouter]] singleton instance\n   */\n  static forRoot(config: RootModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: [\n        _UIROUTER_INSTANCE_PROVIDERS,\n        _UIROUTER_SERVICE_PROVIDERS,\n        locationStrategy(config.useHash),\n        ...makeRootProviders(config),\n      ]\n    };\n  }\n\n  /**\n   * Creates an `NgModule` for a UIRouter module\n   *\n   * This function creates an [Angular NgModule](https://angular.io/docs/ts/latest/guide/ngmodule.html)\n   * with UI-Router support.\n   *\n   * #### Example:\n   * ```js\n   * var homeState = { name: 'home', url: '/home', component: Home };\n   * var aboutState = { name: 'about', url: '/about', component: About };\n   *\n   * @ NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: [ homeState, aboutState ] }),\n   *     SharedModule,\n   *   ],\n   *   declarations: [ Home, About ],\n   * })\n   * export class AppModule {};\n   * ```\n   *\n   * @param module UI-Router module options\n   * @returns an `NgModule`\n   */\n  static forChild(module: StatesModule = {}): ModuleWithProviders {\n    return {\n      ngModule: UIRouterModule,\n      providers: makeChildProviders(module),\n    };\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [CommonModule],\n  declarations: [_UIROUTER_DIRECTIVES],\n  exports: [_UIROUTER_DIRECTIVES],\n  entryComponents: [UIView],\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n/**\n * UI-Router declarative configuration which can be provided to [[UIRouterModule.forRoot]]\n */\nexport interface RootModule extends StatesModule {\n  /**\n   * Chooses a `LocationStrategy`.\n   *\n   * The location strategy enables either HTML5 Push State\n   * (Requires server-side support) or \"HashBang\" URLs.\n   *\n   * When `false`, uses [`PathLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html)\n   * When `true`, uses [`HashLocationStrategy`](https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html)\n   *\n   * Defaults to `false`\n   */\n  useHash?: boolean;\n\n  /**\n   * Configures the `otherwise` rule, which chooses the state or URL to activate when no other routes matched.\n   *\n   * See: [[UrlRulesApi.otherwise]].\n   */\n  otherwise?: (string | UrlRuleHandlerFn | TargetState | TargetStateDef);\n\n  /**\n   * Configures the `initial` rule, which chooses the state or URL to activate when the\n   * application initially starts, and no other routes matched.\n   *\n   * See: [[UrlRulesApi.initial]].\n   */\n  initial?: (string | UrlRuleHandlerFn | TargetState | TargetStateDef);\n\n  /**\n   * Sets [[UrlRouterProvider.deferIntercept]]\n   */\n  deferIntercept?: boolean;\n\n  /**\n   * Tells Angular to defer the first render until after the initial transition is complete.\n   *\n   * When `true`, adds an async `APP_INITIALIZER` which is resolved after any `onSuccess` or `onError`.\n   * The initializer stops angular from rendering the root component until after the first transition completes.\n   * This may prevent initial page flicker while the state is being loaded.\n   *\n   * Defaults to `false`\n   */\n  deferInitialRender?: boolean;\n}\n\n/**\n * UI-Router Module declarative configuration which can be passed to [[UIRouterModule.forChild]]\n */\nexport interface StatesModule {\n  /**\n   * The module's UI-Router states\n   *\n   * This list of [[Ng2StateDeclaration]] objects will be registered with the [[StateRegistry]].\n   * Also, the components that the states route to will be added to `entryComponents` so they will be compiled.\n   */\n  states?: Ng2StateDeclaration[];\n\n  /**\n   * A UI-Router Module's imperative configuration\n   *\n   * If a UI-Router Module needs to perform some configuration (such as registering\n   * parameter types or Transition Hooks) a `configFn` should be supplied.\n   * The function will be passed the `UIRouter` instance, the module's `Injector`,\n   * and the module object.\n   *\n   * #### Example:\n   * ```js\n   * import { Injector } from \"@angular/core\";\n   * import { UIRouter } from \"@uirouter/angular\";\n   * import { requireAuthHook } from \"./requireAuthHook\";\n   * import { MyService } from \"./myService\";\n   *\n   * export function configureMyModule(uiRouter: UIRouter, injector: Injector, module: StatesModule) {\n   *   // Get UIRouter services off the UIRouter object\n   *   let urlConfig = uiRouter.urlService.config;\n   *   let transitionService = uiRouter.transitionService;\n   *   uiRouter.trace.enable(\"TRANSITION\");\n   *\n   *   transitionService.onBefore({ to: (state) => state.requiresAuth }, requireAuthHook);\n   *\n   *   // Create a slug type based on the string type\n   *   let builtInStringType = urlConfig.type('string');\n   *   let slugType = Object.assign({}, builtInStringType, { encode: (str) => str, decode: (str) => str });\n   *   urlConfig.type('slug', slugType);\n   *\n   *   // Inject arbitrary services from DI using the Injector argument\n   *   let myService: MyService = injector.get(MyService)\n   *   myService.useFastMode();\n   * }\n   * ```\n   *\n   * ```js\n   * @NgModule({\n   *   imports: [\n   *     UIRouterModule.forChild({ states: STATES, config: configureMyModule });\n   *   ]\n   * })\n   * class MyModule {}\n   * ```\n   */\n  config?: (uiRouterInstance: UIRouter, injector: Injector, module: StatesModule) => any;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n",
    "/** @ng2api @module core */\n/** */\nimport { NgModuleRef, Injector, NgModuleFactory, Type, Compiler, NgModuleFactoryLoader } from \"@angular/core\";\nimport {\n  Transition, LazyLoadResult, UIRouter, Resolvable, NATIVE_INJECTOR_TOKEN, isString, unnestR, inArray, StateObject,\n  uniqR, StateDeclaration\n} from \"@uirouter/core\";\nimport { RootModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, StatesModule } from \"../uiRouterNgModule\";\nimport { applyModuleConfig } from \"../uiRouterConfig\";\n\n/**\n * A function that returns an NgModule, or a promise for an NgModule\n *\n * #### Example:\n * ```js\n * export function loadFooModule() {\n *   return System.import('../foo/foo.module').then(result => result.FooModule);\n * }\n * ```\n */\nexport type ModuleTypeCallback = () => Type<any> | Promise<Type<any>>;\n/**\n * A string or a function which lazy loads a module\n *\n * If a string, should conform to the Angular Router `loadChildren` string.\n * #### Example:\n * ```\n * var ngModuleToLoad = './foo/foo.module#FooModule'\n * ```\n *\n * For functions, see: [[ModuleTypeCallback]]\n */\nexport type NgModuleToLoad = string | ModuleTypeCallback;\n\n/**\n * Returns a function which lazy loads a nested module\n *\n * This is primarily used by the [[ng2LazyLoadBuilder]] when processing [[Ng2StateDeclaration.loadChildren]].\n *\n * It could also be used manually as a [[StateDeclaration.lazyLoad]] property to lazy load an `NgModule` and its state(s).\n *\n * #### Example:\n * Using `System.import()` and named export of `HomeModule`\n * ```js\n * declare var System;\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule(() => System.import('./home/home.module').then(result => result.HomeModule))\n * }\n * ```\n *\n * #### Example:\n * Using a path (string) to the module\n * ```js\n * var futureState = {\n *   name: 'home.**',\n *   url: '/home',\n *   lazyLoad: loadNgModule('./home/home.module#HomeModule')\n * }\n * ```\n *\n *\n * @param moduleToLoad a path (string) to the NgModule to load.\n *    Or a function which loads the NgModule code which should\n *    return a reference to  the `NgModule` class being loaded (or a `Promise` for it).\n *\n * @returns A function which takes a transition, which:\n * - Gets the Injector (scoped properly for the destination state)\n * - Loads and creates the NgModule\n * - Finds the \"replacement state\" for the target state, and adds the new NgModule Injector to it (as a resolve)\n * - Returns the new states array\n */\nexport function loadNgModule(moduleToLoad: NgModuleToLoad): (transition: Transition, stateObject: StateDeclaration) => Promise<LazyLoadResult> {\n  return (transition: Transition, stateObject: StateDeclaration) => {\n    const ng2Injector = transition.injector().get(NATIVE_INJECTOR_TOKEN);\n\n    const createModule = (factory: NgModuleFactory<any>) =>\n        factory.create(ng2Injector);\n\n    const applyModule = (moduleRef: NgModuleRef<any>) =>\n        applyNgModule(transition, moduleRef, ng2Injector, stateObject);\n\n    return loadModuleFactory(moduleToLoad, ng2Injector)\n        .then(createModule)\n        .then(applyModule);\n  };\n}\n\n/**\n * Returns the module factory that can be used to instantiate a module\n *\n * For strings this:\n * - Finds the correct NgModuleFactoryLoader\n * - Loads the new NgModuleFactory from the path string (async)\n *\n * For a Type<any> or Promise<Type<any>> this:\n * - Compiles the component type (if not running with AOT)\n * - Returns the NgModuleFactory resulting from compilation (or direct loading if using AOT) as a Promise\n *\n * @internalapi\n */\nexport function loadModuleFactory(moduleToLoad: NgModuleToLoad, ng2Injector: Injector): Promise<NgModuleFactory<any>> {\n  if (isString(moduleToLoad)) {\n    return ng2Injector.get(NgModuleFactoryLoader).load(moduleToLoad);\n  }\n\n  const compiler: Compiler = ng2Injector.get(Compiler);\n  const offlineMode = compiler instanceof Compiler;\n\n  const unwrapEsModuleDefault = x =>\n      x && x.__esModule && x['default'] ? x['default'] : x;\n  const compileAsync = (moduleType: Type<any>) =>\n      compiler.compileModuleAsync(moduleType);\n\n  const loadChildrenPromise = Promise.resolve(moduleToLoad()).then(unwrapEsModuleDefault);\n  return offlineMode ? loadChildrenPromise : loadChildrenPromise.then(compileAsync);\n}\n\n/**\n * Apply the UI-Router Modules found in the lazy loaded module.\n *\n * Apply the Lazy Loaded NgModule's newly created Injector to the right state in the state tree.\n *\n * Lazy loading uses a placeholder state which is removed (and replaced) after the module is loaded.\n * The NgModule should include a state with the same name as the placeholder.\n *\n * Find the *newly loaded state* with the same name as the *placeholder state*.\n * The NgModule's Injector (and ComponentFactoryResolver) will be added to that state.\n * The Injector/Factory are used when creating Components for the `replacement` state and all its children.\n *\n * @internalapi\n */\nexport function applyNgModule(transition: Transition, ng2Module: NgModuleRef<any>, parentInjector: Injector, lazyLoadState: StateDeclaration): LazyLoadResult {\n  let injector = ng2Module.injector;\n  let uiRouter: UIRouter = injector.get(UIRouter);\n  let registry = uiRouter.stateRegistry;\n\n  let originalName = lazyLoadState.name;\n  let originalState = registry.get(originalName);\n  // Check if it's a future state (ends with .**)\n  let isFuture = /^(.*)\\.\\*\\*$/.exec(originalName);\n  // Final name (without the .**)\n  let replacementName = isFuture && isFuture[1];\n\n  let newRootModules = multiProviderParentChildDelta(parentInjector, injector, UIROUTER_ROOT_MODULE)\n      .reduce(uniqR, []) as RootModule[];\n  let newChildModules= multiProviderParentChildDelta(parentInjector, injector, UIROUTER_MODULE_TOKEN)\n      .reduce(uniqR, []) as StatesModule[];\n\n  if (newRootModules.length) {\n    console.log(newRootModules);\n    throw new Error('Lazy loaded modules should not contain a UIRouterModule.forRoot() module');\n  }\n\n  let newStateObjects: StateObject[] = newChildModules\n      .map(module => applyModuleConfig(uiRouter, injector, module))\n      .reduce(unnestR, [])\n      .reduce(uniqR, []);\n\n  if (isFuture) {\n    let replacementState = registry.get(replacementName);\n    if (!replacementState || replacementState === originalState) {\n      throw new Error(`The Future State named '${originalName}' lazy loaded an NgModule. ` +\n          `The lazy loaded NgModule must have a state named '${replacementName}' ` +\n          `which replaces the (placeholder) '${originalName}' Future State. ` +\n          `Add a '${replacementName}' state to the lazy loaded NgModule ` +\n          `using UIRouterModule.forChild({ states: CHILD_STATES }).`);\n    }\n  }\n\n  // Supply the newly loaded states with the Injector from the lazy loaded NgModule.\n  // If a tree of states is lazy loaded, only add the injector to the root of the lazy loaded tree.\n  // The children will get the injector by resolve inheritance.\n  let newParentStates = newStateObjects.filter(state => !inArray(newStateObjects, state.parent));\n\n  // Add the Injector to the top of the lazy loaded state tree as a resolve\n  newParentStates.forEach(state => state.resolvables.push(Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector)));\n\n  return {};\n}\n\n/**\n * Returns the new dependency injection values from the Child Injector\n *\n * When a DI token is defined as multi: true, the child injector\n * can add new values for the token.\n *\n * This function returns the values added by the child injector,  and excludes all values from the parent injector.\n *\n * @internalapi\n */\nexport function multiProviderParentChildDelta(parent: Injector, child: Injector, token: any) {\n  let childVals: RootModule[] = child.get(token, []);\n  let parentVals: RootModule[] = parent.get(token, []);\n  return childVals.filter(val => parentVals.indexOf(val) === -1);\n}\n",
    "/** @module ng2 */\n/** */\nimport { LazyLoadResult, Transition, StateDeclaration } from \"@uirouter/core\"; // has or is using\nimport { BuilderFunction, StateObject } from \"@uirouter/core\";\nimport { loadNgModule } from \"../lazyLoad/lazyLoadNgModule\";\n\n/**\n * This is a [[StateBuilder.builder]] function for ngModule lazy loading in Angular.\n *\n * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder\n * decorates the `lazyLoad` property for states that have a [[Ng2StateDeclaration.ngModule]] declaration.\n *\n * If the state has a [[Ng2StateDeclaration.ngModule]], it will create a `lazyLoad` function\n * that in turn calls `loadNgModule(loadNgModuleFn)`.\n *\n * #### Example:\n * A state that has a `ngModule`\n * ```js\n * var decl = {\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: loadNgModule(() => System.import('./childModule.ts')\n * }\n * ```\n *\n * If the state has both a `ngModule:` *and* a `lazyLoad`, then the `lazyLoad` is run first.\n *\n * #### Example:\n * ```js\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library'),\n *   ngModule: () => System.import('./childModule.ts')\n * }\n * ```\n * would build a state with a `lazyLoad` function like:\n * ```js\n * import { loadNgModule } from \"@uirouter/angular\";\n * var decl = {\n *   lazyLoad: () => System.import('third-party-library')\n *       .then(() => loadNgModule(() => System.import('./childModule.ts'))\n * }\n * ```\n *\n */\nexport function ng2LazyLoadBuilder(state: StateObject, parent: BuilderFunction) {\n  let loadNgModuleFn = state['loadChildren'];\n  return loadNgModuleFn ? loadNgModule(loadNgModuleFn) : state.lazyLoad;\n}\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}",
    "/**\n * # UI-Router for Angular (v2+)\n *\n * - [@uirouter/angular home page](https://ui-router.github.io/ng2)\n * - [tutorials](https://ui-router.github.io/tutorial/ng2/helloworld)\n * - [quick start repository](http://github.com/ui-router/quickstart-ng2)\n *\n * Getting started:\n *\n * - Use npm. Add a dependency on latest `@uirouter/angular`\n * - Import UI-Router classes directly from `\"@uirouter/angular\"`\n *\n * ```js\n * import {StateRegistry} from \"@uirouter/angular\";\n * ```\n *\n * - Create application states (as defined by [[Ng2StateDeclaration]]).\n *\n * ```js\n * export let state1: Ng2StateDeclaration = {\n *   name: 'state1',\n *   component: State1Component,\n *   url: '/one'\n * }\n *\n * export let state2: Ng2StateDeclaration = {\n *   name: 'state2',\n *   component: State2Component,\n *   url: '/two'\n * }\n * ```\n *\n * - Import a [[UIRouterModule.forChild]] module into your feature `NgModule`s.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     SharedModule,\n *     UIRouterModule.forChild({ states: [state1, state2 ] })\n *   ],\n *   declarations: [\n *     State1Component,\n *     State2Component,\n *   ]\n * })\n * export class MyFeatureModule {}\n * ```\n *\n * - Import a [[UIRouterModule.forRoot]] module into your application root `NgModule`\n * - Either bootstrap a [[UIView]] component, or add a `<ui-view></ui-view>` viewport to your root component.\n *\n * ```js\n * @ NgModule({\n *   imports: [\n *     BrowserModule,\n *     UIRouterModule.forRoot({ states: [ homeState ] }),\n *     MyFeatureModule,\n *   ],\n *   declarations: [\n *     HomeComponent\n *   ]\n *   bootstrap: [ UIView ]\n * })\n * class RootAppModule {}\n *\n * browserPlatformDynamic.bootstrapModule(RootAppModule);\n * ```\n *\n * - Optionally specify a configuration class [[ChildModule.configClass]] for any module\n * to perform any router configuration during bootstrap or lazyload.\n * Pass the class to [[UIRouterModule.forRoot]] or [[UIRouterModule.forChild]].\n *\n * ```js\n * import {UIRouter} from \"@uirouter/angular\";\n *\n * @ Injectable()\n * export class MyUIRouterConfig {\n *   // Constructor is injectable\n *   constructor(uiRouter: UIRouter) {\n *     uiRouter.urlMatcherFactory.type('datetime', myDateTimeParamType);\n *   }\n * }\n * ```\n *\n * @preferred @module ng2\n */\n/** */\nimport { Injector, Provider, PLATFORM_ID } from \"@angular/core\";\nimport { isPlatformBrowser } from \"@angular/common\";\nimport {\n  UIRouter, PathNode, StateRegistry, StateService, TransitionService, UrlMatcherFactory, UrlRouter, ViewService,\n  UrlService, UIRouterGlobals, services, Resolvable, NATIVE_INJECTOR_TOKEN,\n} from \"@uirouter/core\";\nimport { UIView, ParentUIViewInject } from \"./directives/uiView\";\nimport { ng2ViewsBuilder, Ng2ViewConfig } from \"./statebuilders/views\";\nimport { Ng2ViewDeclaration } from \"./interface\";\nimport { applyRootModuleConfig, applyModuleConfig } from \"./uiRouterConfig\";\nimport { RootModule, StatesModule, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN } from \"./uiRouterNgModule\";\nimport { servicesPlugin, ServicesPlugin } from \"@uirouter/core\";\nimport { ng2LazyLoadBuilder } from \"./statebuilders/lazyLoad\";\nimport { UIRouterRx } from \"@uirouter/rx\";\nimport { LocationStrategy } from \"@angular/common\";\nimport { Ng2LocationServices } from \"./location/locationService\";\nimport { Ng2LocationConfig } from \"./location/locationConfig\";\n\n/**\n * This is a factory function for a UIRouter instance\n *\n * Creates a UIRouter instance and configures it for Angular, then invokes router bootstrap.\n * This function is used as an Angular `useFactory` Provider.\n */\nexport function uiRouterFactory(locationStrategy: LocationStrategy, rootModules: RootModule[], modules: StatesModule[], injector: Injector) {\n  if (rootModules.length !== 1) {\n    throw new Error(\"Exactly one UIRouterModule.forRoot() should be in the bootstrapped app module's imports: []\");\n  }\n\n  // ----------------- Create router -----------------\n  // Create a new ng2 UIRouter and configure it for ng2\n  let router = new UIRouter();\n\n  // Add RxJS plugin\n  router.plugin(UIRouterRx);\n\n  // Add $q-like and $injector-like service APIs\n  router.plugin<ServicesPlugin>(servicesPlugin);\n\n\n  // ----------------- Monkey Patches ----------------\n  // Monkey patch the services.$injector to use the root ng2 Injector\n  services.$injector.get = injector.get.bind(injector);\n\n\n  // ----------------- Configure for ng2 -------------\n  router.locationService = new Ng2LocationServices(router, locationStrategy, isPlatformBrowser(injector.get(PLATFORM_ID)));\n  router.locationConfig = new Ng2LocationConfig(router, locationStrategy);\n\n  // Apply ng2 ui-view handling code\n  let viewConfigFactory = (path: PathNode[], config: Ng2ViewDeclaration) => new Ng2ViewConfig(path, config);\n  router.viewService._pluginapi._viewConfigFactory(\"ng2\", viewConfigFactory);\n\n  // Apply statebuilder decorator for ng2 NgModule registration\n  let registry = router.stateRegistry;\n  registry.decorator('views', ng2ViewsBuilder);\n  registry.decorator('lazyLoad', ng2LazyLoadBuilder);\n\n  // Prep the tree of NgModule by placing the root NgModule's Injector on the root state.\n  let ng2InjectorResolvable = Resolvable.fromData(NATIVE_INJECTOR_TOKEN, injector);\n  registry.root().resolvables.push(ng2InjectorResolvable);\n\n  // Auto-flush the parameter type queue\n  router.urlMatcherFactory.$get();\n\n  // ----------------- Initialize router -------------\n  rootModules.forEach(moduleConfig => applyRootModuleConfig(router, injector, moduleConfig));\n  modules.forEach(moduleConfig => applyModuleConfig(router, injector, moduleConfig));\n\n  // Start monitoring the URL\n  if (!router.urlRouter.interceptDeferred) {\n    router.urlService.listen();\n    router.urlService.sync();\n  }\n\n  return router;\n}\n\nexport function parentUIViewInjectFactory(r: StateRegistry) { return { fqn: null, context: r.root() } as ParentUIViewInject; }\n\nexport const _UIROUTER_INSTANCE_PROVIDERS: Provider[] =  [\n  { provide: UIRouter, useFactory: uiRouterFactory, deps: [LocationStrategy, UIROUTER_ROOT_MODULE, UIROUTER_MODULE_TOKEN, Injector] },\n  { provide: UIView.PARENT_INJECT, useFactory: parentUIViewInjectFactory, deps: [StateRegistry]},\n];\n\nexport function fnStateService(r: UIRouter) { return r.stateService; }\nexport function fnTransitionService(r: UIRouter) { return r.transitionService; }\nexport function fnUrlMatcherFactory(r: UIRouter) { return r.urlMatcherFactory; }\nexport function fnUrlRouter(r: UIRouter) { return r.urlRouter; }\nexport function fnUrlService(r: UIRouter) { return r.urlService; }\nexport function fnViewService(r: UIRouter) { return r.viewService; }\nexport function fnStateRegistry(r: UIRouter) { return r.stateRegistry; }\nexport function fnGlobals(r: any) { return r.globals; }\n\nexport const _UIROUTER_SERVICE_PROVIDERS: Provider[] = [\n  { provide: StateService,      useFactory: fnStateService,       deps: [UIRouter]},\n  { provide: TransitionService, useFactory: fnTransitionService,  deps: [UIRouter]},\n  { provide: UrlMatcherFactory, useFactory: fnUrlMatcherFactory,  deps: [UIRouter]},\n  { provide: UrlRouter,         useFactory: fnUrlRouter,          deps: [UIRouter]},\n  { provide: UrlService,        useFactory: fnUrlService,         deps: [UIRouter]},\n  { provide: ViewService,       useFactory: fnViewService,        deps: [UIRouter]},\n  { provide: StateRegistry,     useFactory: fnStateRegistry,      deps: [UIRouter]},\n  { provide: UIRouterGlobals,   useFactory: fnGlobals,            deps: [UIRouter]},\n];\n\n/**\n * The UI-Router providers, for use in your application bootstrap\n *\n * @deprecated use [[UIRouterModule.forRoot]]\n */\nexport const UIROUTER_PROVIDERS: Provider[] = _UIROUTER_INSTANCE_PROVIDERS.concat(_UIROUTER_SERVICE_PROVIDERS);\n",
    "/** @module ng2 */ /** */\nimport {Injector} from \"@angular/core\";\n\n/**\n * Merge two injectors\n *\n * This class implements the Injector ng2 interface but delegates\n * to the Injectors provided in the constructor.\n */\nexport class MergeInjector implements Injector {\n  static NOT_FOUND = {};\n  private injectors: Injector[];\n  constructor(...injectors: Injector[]) {\n    if (injectors.length < 2) throw new Error(\"pass at least two injectors\");\n    this.injectors = injectors;\n  }\n\n  /**\n   * Get the token from the first injector which contains it.\n   *\n   * Delegates to the first Injector.get().\n   * If not found, then delegates to the second Injector (and so forth).\n   * If no Injector contains the token, return the `notFoundValue`, or throw.\n   *\n   * @param token the DI token\n   * @param notFoundValue the value to return if none of the Injectors contains the token.\n   * @returns {any} the DI value\n   */\n  get(token: any, notFoundValue?: any): any {\n    for (let i = 0; i < this.injectors.length; i++) {\n      let val = this.injectors[i].get(token, MergeInjector.NOT_FOUND);\n      if (val !== MergeInjector.NOT_FOUND) return val;\n    }\n\n    if (arguments.length >= 2) return notFoundValue;\n\n    // This will throw the DI Injector error\n    this.injectors[0].get(token);\n  }\n}",
    "/** @ng2api @module directives */\n/** */\nimport {\n  Component, ComponentFactoryResolver, ViewContainerRef, Input, ComponentRef, Type, ReflectiveInjector, ViewChild,\n  Injector, Inject, ComponentFactory\n} from '@angular/core';\n\nimport {\n  UIRouter, isFunction, Transition, parse, TransitionHookFn, StateDeclaration, inArray, trace, ViewContext, ViewConfig,\n  ActiveUIView, ResolveContext, NATIVE_INJECTOR_TOKEN, flattenR\n} from '@uirouter/core';\nimport { Ng2ViewConfig } from '../statebuilders/views';\nimport { MergeInjector } from '../mergeInjector';\n\n/** @hidden */\nlet id = 0;\n\n/** @internalapi These are provide()d as the string UIView.PARENT_INJECT */\nexport interface ParentUIViewInject {\n  context: ViewContext;\n  fqn: string;\n}\n\n/** @internalapi */\ninterface InputMapping {\n  token: string;\n  prop: string;\n}\n\n/**\n * Given a component class, gets the inputs of styles:\n *\n * - @Input('foo') _foo\n * - `inputs: ['foo']`\n *\n * @internalapi\n */\nconst ng2ComponentInputs = (factory: ComponentFactory<any>): InputMapping[] => {\n  return factory.inputs.map(input => ({ prop: input.propName, token: input.templateName }));\n};\n\n/**\n * A UI-Router viewport directive, which is filled in by a view (component) on a state.\n *\n * ### Selector\n *\n * A `ui-view` directive can be created as an element: `<ui-view></ui-view>` or as an attribute: `<div ui-view></div>`.\n *\n * ### Purpose\n *\n * This directive is used in a Component template (or as the root component) to create a viewport.  The viewport\n * is filled in by a view (as defined by a [[Ng2ViewDeclaration]] inside a [[Ng2StateDeclaration]]) when the view's\n * state has been activated.\n *\n * #### Example:\n * ```js\n * // This app has two states, 'foo' and 'bar'\n * stateRegistry.register({ name: 'foo', url: '/foo', component: FooComponent });\n * stateRegistry.register({ name: 'bar', url: '/bar', component: BarComponent });\n * ```\n * ```html\n * <!-- This ui-view will be filled in by the foo state's component or\n *      the bar state's component when the foo or bar state is activated -->\n * <ui-view></ui-view>\n * ```\n *\n * ### Named ui-views\n *\n * A `ui-view` may optionally be given a name via the attribute value: `<div ui-view='header'></div>`.  *Note:\n * an unnamed `ui-view` is internally named `$default`*.   When a `ui-view` has a name, it will be filled in\n * by a matching named view.\n *\n * #### Example:\n * ```js\n * stateRegistry.register({\n *   name: 'foo',\n *   url: '/foo',\n *   views: { header: HeaderComponent, $default: FooComponent });\n * ```\n * ```html\n * <!-- When 'foo' state is active, filled by HeaderComponent -->\n * <div ui-view=\"header\"></div>\n *\n * <!-- When 'foo' state is active, filled by FooComponent -->\n * <ui-view></ui-view>\n * ```\n */\n\nexport class UIView {\n   _componentTarget: ViewContainerRef;\n   name: string;\n   set _name(val: string) { this.name = val; }\n  /** The reference to the component currently inside the viewport */\n  _componentRef: ComponentRef<any>;\n  /** Deregisters the ui-view from the view service */\n  private _deregisterUIView: Function;\n  /** Deregisters the master uiCanExit transition hook */\n  private _deregisterHook: Function;\n  /** Data about the this UIView */\n  private _uiViewData: ActiveUIView = <any> {};\n  private _parent: ParentUIViewInject;\n\n  static PARENT_INJECT = \"UIView.PARENT_INJECT\";\n\n  constructor(\n      public router: UIRouter,\n       parent,\n      public viewContainerRef: ViewContainerRef,\n  ) {\n    this._parent = parent;\n  }\n\n  /**\n   * @returns the UI-Router `state` that is filling this uiView, or `undefined`.\n   */\n  public get state(): StateDeclaration {\n    return parse(\"_uiViewData.config.viewDecl.$context.self\")(this);\n  }\n\n  ngOnInit() {\n    const router = this.router;\n    const parentFqn = this._parent.fqn;\n    const name = this.name || '$default';\n\n    this._uiViewData = {\n      $type: 'ng2',\n      id: id++,\n      name: name,\n      fqn: parentFqn ? parentFqn + \".\" + name : name,\n      creationContext: this._parent.context,\n      configUpdated: this._viewConfigUpdated.bind(this),\n      config: undefined\n    };\n\n    this._deregisterHook = router.transitionService.onBefore({}, trans => this._applyUiCanExitHook(trans));\n    this._deregisterUIView = router.viewService.registerUIView(this._uiViewData);\n  }\n\n  /**\n   * For each transition, checks the component loaded in the ui-view for:\n   *\n   * - has a uiCanExit() component hook\n   * - is being exited\n   *\n   * If both are true, adds the uiCanExit component function as a hook to that singular Transition.\n   */\n  private _applyUiCanExitHook(trans: Transition) {\n    const instance = this._componentRef && this._componentRef.instance;\n    const uiCanExitFn: TransitionHookFn = instance && instance.uiCanExit;\n\n    if (isFunction(uiCanExitFn)) {\n      const state: StateDeclaration = this.state;\n\n      if (trans.exiting().indexOf(state) !== -1) {\n        trans.onStart({}, function() {\n          return uiCanExitFn.call(instance, trans);\n        });\n      }\n    }\n  }\n\n  private _disposeLast() {\n    if (this._componentRef) this._componentRef.destroy();\n    this._componentRef = null;\n  }\n\n  ngOnDestroy() {\n    if (this._deregisterUIView) this._deregisterUIView();\n    if (this._deregisterHook) this._deregisterHook();\n    this._disposeLast();\n  }\n\n  /**\n   * The view service is informing us of an updated ViewConfig\n   * (usually because a transition activated some state and its views)\n   */\n  _viewConfigUpdated(config: ViewConfig) {\n    // The config may be undefined if there is nothing currently targeting this UIView.\n    // Dispose the current component, if there is one\n    if (!config) return this._disposeLast();\n\n    // Only care about Ng2 configs\n    if (!(config instanceof Ng2ViewConfig)) return;\n\n    // The \"new\" viewconfig is already applied, so exit early\n    if (this._uiViewData.config === config) return;\n\n    // This is a new ViewConfig.  Dispose the previous component\n    this._disposeLast();\n    trace.traceUIViewConfigUpdated(this._uiViewData, config && config.viewDecl.$context);\n\n    this._applyUpdatedConfig(config);\n\n    // Initiate change detection for the newly created component\n    this._componentRef.changeDetectorRef.markForCheck();\n  }\n\n  private _applyUpdatedConfig(config: Ng2ViewConfig) {\n    this._uiViewData.config = config;\n    // Create the Injector for the routed component\n    let context = new ResolveContext(config.path);\n    let componentInjector = this._getComponentInjector(context);\n\n    // Get the component class from the view declaration. TODO: allow promises?\n    let componentClass = config.viewDecl.component;\n\n    // Create the component\n    let compFactoryResolver = componentInjector.get(ComponentFactoryResolver);\n    let compFactory = compFactoryResolver.resolveComponentFactory(componentClass);\n    this._componentRef = this._componentTarget.createComponent(compFactory, undefined, componentInjector);\n\n    // Wire resolves to @Input()s\n    this._applyInputBindings(compFactory, this._componentRef.instance, context, componentClass);\n  }\n\n  /**\n   * Creates a new Injector for a routed component.\n   *\n   * Adds resolve values to the Injector\n   * Adds providers from the NgModule for the state\n   * Adds providers from the parent Component in the component tree\n   * Adds a PARENT_INJECT view context object\n   *\n   * @returns an Injector\n   */\n  private _getComponentInjector(context: ResolveContext): Injector {\n    // Map resolves to \"useValue: providers\"\n    let resolvables = context.getTokens().map(token => context.getResolvable(token)).filter(r => r.resolved);\n    let newProviders = resolvables.map(r => ({ provide: r.token, useValue: r.data }));\n\n    let parentInject = { context: this._uiViewData.config.viewDecl.$context, fqn: this._uiViewData.fqn };\n    newProviders.push({ provide: UIView.PARENT_INJECT, useValue: parentInject });\n\n    let parentComponentInjector = this.viewContainerRef.injector;\n    let moduleInjector = context.getResolvable(NATIVE_INJECTOR_TOKEN).data;\n    let mergedParentInjector = new MergeInjector(moduleInjector, parentComponentInjector);\n\n    return ReflectiveInjector.resolveAndCreate(newProviders, mergedParentInjector);\n  }\n\n  /**\n   * Supplies component inputs with resolve data\n   *\n   * Finds component inputs which match resolves (by name) and sets the input value\n   * to the resolve data.\n   */\n  private _applyInputBindings(factory: ComponentFactory<any>, component: any, context: ResolveContext, componentClass) {\n    const bindings = this._uiViewData.config.viewDecl['bindings'] || {};\n    const explicitBoundProps = Object.keys(bindings);\n\n    // Returns the actual component property for a renamed an input renamed using `@Input('foo') _foo`.\n    // return the `_foo` property\n    const renamedInputProp = (prop: string) => {\n      const input = factory.inputs.find(i => i.templateName === prop);\n      return input && input.propName || prop;\n    };\n\n    // Supply resolve data to component as specified in the state's `bindings: {}`\n    const explicitInputTuples = explicitBoundProps\n        .reduce((acc, key) => acc.concat([{ prop: renamedInputProp(key), token: bindings[key] }]), []);\n\n    // Supply resolve data to matching @Input('prop') or inputs: ['prop']\n    const implicitInputTuples = ng2ComponentInputs(factory)\n        .filter(tuple => !inArray(explicitBoundProps, tuple.prop));\n\n    const addResolvable = (tuple: InputMapping) => ({\n      prop: tuple.prop,\n      resolvable: context.getResolvable(tuple.token),\n    });\n\n    explicitInputTuples.concat(implicitInputTuples)\n        .map(addResolvable)\n        .filter(tuple => tuple.resolvable && tuple.resolvable.resolved)\n        .forEach(tuple => { component[tuple.prop] = tuple.resolvable.data; });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ui-view, [ui-view]',\n  exportAs: 'uiView',\n  template: `\n    <ng-template #componentTarget></ng-template>\n    <ng-content *ngIf=\"!_componentRef\"></ng-content>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouter, },\n{type: undefined, decorators: [{ type: Inject, args: [UIView.PARENT_INJECT, ] }, ]},\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_componentTarget': [{ type: ViewChild, args: ['componentTarget', {read: ViewContainerRef}, ] },],\n'name': [{ type: Input, args: ['name', ] },],\n'_name': [{ type: Input, args: ['ui-view', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n",
    "/** @ng2api @module directives */\n/** */\nimport { UIRouter, extend, Obj, TransitionOptions, TargetState } from \"@uirouter/core\";\nimport { Directive, Inject, Input, Optional, ElementRef, Renderer2, OnChanges, SimpleChanges } from \"@angular/core\";\nimport { UIView, ParentUIViewInject } from \"./uiView\";\nimport { ReplaySubject } from \"rxjs/ReplaySubject\";\nimport { Subscription } from \"rxjs/Subscription\";\n\n/**\n * @internalapi\n * # blah blah blah\n */\n\nexport class AnchorUISref {\n  constructor(public _el: ElementRef, public _renderer: Renderer2) { }\n  openInNewTab() {\n    return this._el.nativeElement.target === '_blank';\n  }\n  update(href: string) {\n    if (href && href !== '') {\n      this._renderer.setProperty(this._el.nativeElement, 'href', href);\n    } else {\n      this._renderer.removeAttribute(this._el.nativeElement, 'href');\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: 'a[uiSref]' }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n];\n}\n\n/**\n * A directive when clicked, initiates a [[Transition]] to a [[TargetState]].\n *\n * ### Purpose\n *\n * This directive is applied to anchor tags (`<a>`) or any other clickable element.  It is a state reference (or sref --\n * similar to an href).  When clicked, the directive will transition to that state by calling [[StateService.go]],\n * and optionally supply state parameter values and transition options.\n *\n * When this directive is on an anchor tag, it will also add an `href` attribute to the anchor.\n *\n * ### Selector\n *\n * - `[uiSref]`: The directive is created as an attribute on an element, e.g., `<a uiSref></a>`\n *\n * ### Inputs\n *\n * - `uiSref`: the target state's name, e.g., `uiSref=\"foostate\"`.  If a component template uses a relative `uiSref`,\n * e.g., `uiSref=\".child\"`, the reference is relative to that component's state.\n *\n * - `uiParams`: any target state parameter values, as an object, e.g., `[uiParams]=\"{ fooId: bar.fooId }\"`\n *\n * - `uiOptions`: [[TransitionOptions]], e.g., `[uiOptions]=\"{ inherit: false }\"`\n *\n * @example\n * ```html\n *\n * <!-- Targets bar state' -->\n * <a uiSref=\"bar\">Bar</a>\n *\n * <!-- Assume this component's state is \"foo\".\n *      Relatively targets \"foo.child\" -->\n * <a uiSref=\".child\">Foo Child</a>\n *\n * <!-- Targets \"bar\" state and supplies parameter value -->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\">Bar {{foo.barId}}</a>\n *\n * <!-- Targets \"bar\" state and parameter, doesn't inherit existing parameters-->\n * <a uiSref=\"bar\" [uiParams]=\"{ barId: foo.barId }\" [uiOptions]=\"{ inherit: false }\">Bar {{foo.barId}}</a>\n * ```\n */\n\nexport class UISref implements OnChanges {\n\n  /**\n   * `@Input('uiSref')` The name of the state to link to\n   *\n   * ```html\n   * <a uiSref=\"hoome\">Home</a>\n   * ```\n   */\n   state: string;\n\n  /**\n   * `@Input('uiParams')` The parameter values to use (as key/values)\n   *\n   * ```html\n   * <a uiSref=\"book\" [uiParams]=\"{ bookId: book.id }\">Book {{ book.name }}</a>\n   * ```\n   */\n   params: any;\n\n  /**\n   * `@Input('uiOptions')` The transition options\n   *\n   * ```html\n   * <a uiSref=\"books\" [uiOptions]=\"{ reload: true }\">Book {{ book.name }}</a>\n   * ```\n   */\n   options: TransitionOptions;\n\n  /**\n   * An observable (ReplaySubject) of the state this UISref is targeting.\n   * When the UISref is clicked, it will transition to this [[TargetState]].\n   */\n  public targetState$ = new ReplaySubject<TargetState>(1);\n\n  /** @internalapi */ private _emit: boolean = false;\n  /** @internalapi */ private _statesSub: Subscription;\n  /** @internalapi */ private _router: UIRouter;\n  /** @internalapi */ private _anchorUISref: AnchorUISref;\n  /** @internalapi */ private _parent: ParentUIViewInject;\n\n  constructor(\n      _router: UIRouter,\n       _anchorUISref: AnchorUISref,\n       parent: ParentUIViewInject,\n  ) {\n    this._router = _router;\n    this._anchorUISref = _anchorUISref;\n    this._parent = parent;\n\n    this._statesSub = _router.globals.states$.subscribe(() => this.update());\n  }\n\n  /** @internalapi */\n  set \"uiSref\"(val: string) { this.state = val; this.update(); }\n  /** @internalapi */\n  set \"uiParams\"(val: Obj) { this.params = val; this.update(); }\n  /** @internalapi */\n  set \"uiOptions\"(val: TransitionOptions) { this.options = val; this.update(); }\n\n  ngOnInit() {\n    this._emit = true;\n    this.update();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.update();\n  }\n\n  ngOnDestroy() {\n    this._emit = false;\n    this._statesSub.unsubscribe();\n    this.targetState$.unsubscribe();\n  }\n\n  private update() {\n    let $state = this._router.stateService;\n    if (this._emit) {\n      let newTarget = $state.target(this.state, this.params, this.getOptions());\n      this.targetState$.next(newTarget);\n    }\n\n    if (this._anchorUISref) {\n      let href = $state.href(this.state, this.params, this.getOptions());\n      this._anchorUISref.update(href);\n    }\n  }\n\n  getOptions() {\n    let defaultOpts: TransitionOptions = {\n      relative: this._parent && this._parent.context && this._parent.context.name,\n      inherit: true ,\n      source: \"sref\"\n    };\n    return extend(defaultOpts, this.options || {});\n  }\n\n  /** When triggered by a (click) event, this function transitions to the UISref's target state */\n  go() {\n    if (this._anchorUISref && this._anchorUISref.openInNewTab()) {\n      return ;\n    }\n\n    this._router.stateService.go(this.state, this.params, this.getOptions());\n    return false;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uiSref]',\n  exportAs: 'uiSref',\n  host: { '(click)': 'go()' }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UIRouter, },\n{type: AnchorUISref, decorators: [{ type: Optional }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [UIView.PARENT_INJECT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'state': [{ type: Input, args: ['uiSref', ] },],\n'params': [{ type: Input, args: ['uiParams', ] },],\n'options': [{ type: Input, args: ['uiOptions', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n",
    "/** @ng2api @module directives */ /** */\nimport {Directive, Input, ElementRef, Host, Renderer} from \"@angular/core\";\nimport {UISrefStatus, SrefStatus} from \"./uiSrefStatus\";\nimport {Subscription} from \"rxjs/Subscription\";\n\n/**\n * A directive that adds a CSS class when its associated `uiSref` link is active.\n *\n * ### Purpose\n *\n * This directive should be paired with one (or more) [[UISref]] directives.\n * It will apply a CSS class to its element when the state the `uiSref` targets is activated.\n *\n * This can be used to create navigation UI where the active link is highlighted.\n *\n * ### Selectors\n *\n * - `[uiSrefActive]`: When this selector is used, the class is added when the target state or any\n * child of the target state is active\n * - `[uiSrefActiveEq]`: When this selector is used, the class is added when the target state is\n * exactly active (the class is not added if a child of the target state is active).\n *\n * ### Inputs\n *\n * - `uiSrefActive`/`uiSrefActiveEq`: one or more CSS classes to add to the element, when the `uiSref` is active\n *\n * #### Example:\n * The anchor tag has the `active` class added when the `foo` state is active.\n * ```html\n * <a uiSref=\"foo\" uiSrefActive=\"active\">Foo</a>\n * ```\n *\n * ### Matching parameters\n *\n * If the `uiSref` includes parameters, the current state must be active, *and* the parameter values must match.\n *\n * #### Example:\n * The first anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 25.\n * The second anchor tag has the `active` class added when the `foo.bar` state is active and the `id` parameter\n * equals 32.\n * ```html\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 25 }\" uiSrefActive=\"active\">Bar #25</a>\n * <a uiSref=\"foo.bar\" [uiParams]=\"{ id: 32 }\" uiSrefActive=\"active\">Bar #32</a>\n * ```\n *\n * #### Example:\n * A list of anchor tags are created for a list of `bar` objects.\n * An anchor tag will have the `active` class when `foo.bar` state is active and the `id` parameter matches\n * that object's `id`.\n * ```html\n * <li *ngFor=\"let bar of bars\">\n *   <a uiSref=\"foo.bar\" [uiParams]=\"{ id: bar.id }\" uiSrefActive=\"active\">Bar #{{ bar.id }}</a>\n * </li>\n * ```\n *\n * ### Multiple uiSrefs\n *\n * A single `uiSrefActive` can be used for multiple `uiSref` links.\n * This can be used to create (for example) a drop down navigation menu, where the menui is highlighted\n * if *any* of its inner links are active.\n *\n * The `uiSrefActive` should be placed on an ancestor element of the `uiSref` list.\n * If anyof the `uiSref` links are activated, the class will be added to the ancestor element.\n *\n * #### Example:\n * This is a dropdown nagivation menu for \"Admin\" states.\n * When any of `admin.users`, `admin.groups`, `admin.settings` are active, the `<li>` for the dropdown\n * has the `dropdown-child-active` class applied.\n * Additionally, the active anchor tag has the `active` class applied.\n * ```html\n * <ul class=\"dropdown-menu\">\n *   <li uiSrefActive=\"dropdown-child-active\" class=\"dropdown admin\">\n *     Admin\n *     <ul>\n *       <li><a uiSref=\"admin.users\" uiSrefActive=\"active\">Users</a></li>\n *       <li><a uiSref=\"admin.groups\" uiSrefActive=\"active\">Groups</a></li>\n *       <li><a uiSref=\"admin.settings\" uiSrefActive=\"active\">Settings</a></li>\n *     </ul>\n *   </li>\n * </ul>\n * ```\n */\n\nexport class UISrefActive {\n\n  private _classes: string[] = [];\n   set active(val: string) { this._classes = val.split(\"\\s+\")};\n\n  private _classesEq: string[] = [];\n   set activeEq(val: string) { this._classesEq = val.split(\"\\s+\")};\n\n  private _subscription: Subscription;\n  constructor(uiSrefStatus: UISrefStatus, rnd: Renderer,  host: ElementRef) {\n    this._subscription = uiSrefStatus.uiSrefStatus.subscribe((next: SrefStatus) => {\n      this._classes.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.active));\n      this._classesEq.forEach(cls => rnd.setElementClass(host.nativeElement, cls, next.exact));\n    });\n  }\n\n  ngOnDestroy() {\n    this._subscription.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[uiSrefActive],[uiSrefActiveEq]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UISrefStatus, },\n{type: Renderer, },\n{type: ElementRef, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'active': [{ type: Input, args: ['uiSrefActive', ] },],\n'activeEq': [{ type: Input, args: ['uiSrefActiveEq', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n",
    "/**\n * The UI-Router for Angular directives:\n *\n * - [[UIView]]: A viewport for routed components\n * - [[UISref]]: A state ref to a target state; navigates when clicked\n * - [[UISrefActive]]: (and `UISrefActiveEq`) Adds a css class when a UISref's target state (or a child state) is active\n *\n * @ng2api\n * @preferred\n * @module directives\n */ /** */\nimport {UISref, AnchorUISref} from \"./uiSref\";\nimport {UISrefActive} from \"./uiSrefActive\";\nimport {UIView} from \"./uiView\";\nimport {UISrefStatus} from \"./uiSrefStatus\";\n\nexport * from \"./uiView\";\nexport * from \"./uiSref\";\nexport * from \"./uiSrefStatus\";\nexport * from \"./uiSrefActive\";\n\n/** @internalapi */\nexport const _UIROUTER_DIRECTIVES = [UISref, AnchorUISref, UIView, UISrefActive, UISrefStatus];\n\n/**\n * References to the UI-Router directive classes, for use within a @Component's `directives:` property\n * @deprecated use [[UIRouterModule]]\n * @internalapi\n */\nexport const UIROUTER_DIRECTIVES = _UIROUTER_DIRECTIVES;\n",
    "/** @module ng2 */\n/** */\nimport { BaseLocationServices, parseUrl, UIRouter } from '@uirouter/core';\nimport { LocationStrategy } from '@angular/common';\n\n/** A `LocationServices` that delegates to the Angular LocationStrategy */\nexport class Ng2LocationServices extends BaseLocationServices {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy, isBrowser: boolean) {\n    super(router, isBrowser);\n\n    this._locationStrategy.onPopState((evt) => {\n      if (evt.type !== 'hashchange') {\n        this._listener(evt);\n      }\n    });\n  }\n\n  _get() {\n    return this._locationStrategy.path(true)\n      .replace(this._locationStrategy.getBaseHref().replace(/\\/$/, ''), '');\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean): any {\n    let { path, search, hash } = parseUrl(url);\n    let urlWithHash = path + (hash ? \"#\" + hash : \"\");\n\n    if (replace) {\n      this._locationStrategy.replaceState(state, title, urlWithHash, search);\n    } else {\n      this._locationStrategy.pushState(state, title, urlWithHash, search);\n    }\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n  }\n}\n",
    "/** @module ng2 */\n/** */\n\nimport { UIRouter, is, BrowserLocationConfig } from \"@uirouter/core\";\nimport { LocationStrategy, PathLocationStrategy } from \"@angular/common\";\n\nexport class Ng2LocationConfig extends BrowserLocationConfig {\n  constructor(router: UIRouter, private _locationStrategy: LocationStrategy) {\n    super(router, is(PathLocationStrategy)(_locationStrategy))\n  }\n\n  baseHref(href?: string): string {\n    return this._locationStrategy.getBaseHref();\n  }\n}\n"
  ],
  "names": [
    "state",
    "views",
    "viewsObject",
    "$default",
    "pick",
    "forEach",
    "config",
    "name",
    "isFunction",
    "component",
    "Object",
    "keys",
    "length",
    "$type",
    "$context",
    "$name",
    "normalized",
    "ViewService",
    "normalizeUIViewTarget",
    "$uiViewName",
    "uiViewName",
    "$uiViewContextAnchor",
    "uiViewContextAnchor",
    "uiRouter",
    "injector",
    "module",
    "states",
    "map",
    "stateRegistry",
    "register",
    "isDefined",
    "deferIntercept",
    "urlService",
    "otherwise",
    "rules",
    "initial",
    "basePath",
    "appendPath",
    "node",
    "concat",
    "PathUtils",
    "subPath",
    "n",
    "event",
    "srefTarget",
    "pathMatchesTarget",
    "pathMatches",
    "tc",
    "trans",
    "treeChanges",
    "isStartEvent",
    "evt",
    "isSuccessEvent",
    "activePath",
    "to",
    "from",
    "active",
    "spreadToSubPaths",
    "reduce",
    "anyTrueR",
    "exact",
    "entering",
    "retained",
    "exiting",
    "targetStates",
    "left",
    "right",
    "transitionService",
    "root",
    "mod",
    "deferInitialRender",
    "Promise",
    "resolve",
    "hook",
    "promise",
    "then",
    "onStart",
    "invokeLimit",
    "provide",
    "UIROUTER_ROOT_MODULE",
    "useValue",
    "multi",
    "UIROUTER_MODULE_TOKEN",
    "ROUTES",
    "ANALYZE_FOR_ENTRY_COMPONENTS",
    "APP_INITIALIZER",
    "useFactory",
    "onTransitionReady",
    "deps",
    "TransitionService",
    "useHash",
    "LocationStrategy",
    "useClass",
    "HashLocationStrategy",
    "PathLocationStrategy",
    "moduleToLoad",
    "transition",
    "stateObject",
    "ng2Injector",
    "get",
    "NATIVE_INJECTOR_TOKEN",
    "createModule",
    "factory",
    "create",
    "applyModule",
    "moduleRef",
    "applyNgModule",
    "loadModuleFactory",
    "isString",
    "NgModuleFactoryLoader",
    "load",
    "compiler",
    "Compiler",
    "offlineMode",
    "unwrapEsModuleDefault",
    "x",
    "__esModule",
    "compileAsync",
    "moduleType",
    "compileModuleAsync",
    "loadChildrenPromise",
    "ng2Module",
    "parentInjector",
    "lazyLoadState",
    "UIRouter",
    "registry",
    "originalName",
    "originalState",
    "isFuture",
    "exec",
    "replacementName",
    "newRootModules",
    "multiProviderParentChildDelta",
    "uniqR",
    "newChildModules",
    "console",
    "log",
    "Error",
    "newStateObjects",
    "applyModuleConfig",
    "unnestR",
    "replacementState",
    "filter",
    "inArray",
    "parent",
    "resolvables",
    "push",
    "Resolvable",
    "fromData",
    "child",
    "token",
    "childVals",
    "parentVals",
    "val",
    "indexOf",
    "loadNgModuleFn",
    "loadNgModule",
    "lazyLoad",
    "__extends",
    "d",
    "b",
    "__",
    "this",
    "constructor",
    "extendStatics",
    "prototype",
    "locationStrategy",
    "rootModules",
    "modules",
    "router",
    "plugin",
    "UIRouterRx",
    "servicesPlugin",
    "services",
    "$injector",
    "bind",
    "locationService",
    "Ng2LocationServices",
    "isPlatformBrowser",
    "PLATFORM_ID",
    "locationConfig",
    "Ng2LocationConfig",
    "viewConfigFactory",
    "path",
    "Ng2ViewConfig",
    "viewService",
    "_pluginapi",
    "_viewConfigFactory",
    "decorator",
    "ng2ViewsBuilder",
    "ng2LazyLoadBuilder",
    "ng2InjectorResolvable",
    "urlMatcherFactory",
    "$get",
    "moduleConfig",
    "applyRootModuleConfig",
    "urlRouter",
    "interceptDeferred",
    "listen",
    "sync",
    "r",
    "fqn",
    "context",
    "stateService",
    "globals",
    "id",
    "viewDecl",
    "$q",
    "when",
    "_i",
    "injectors",
    "MergeInjector",
    "notFoundValue",
    "i",
    "NOT_FOUND",
    "arguments",
    "ng2ComponentInputs",
    "inputs",
    "input",
    "prop",
    "propName",
    "templateName",
    "viewContainerRef",
    "_parent",
    "UIView",
    "parse",
    "parentFqn",
    "_uiViewData",
    "creationContext",
    "configUpdated",
    "_viewConfigUpdated",
    "undefined",
    "_deregisterHook",
    "onBefore",
    "_this",
    "_applyUiCanExitHook",
    "_deregisterUIView",
    "registerUIView",
    "instance",
    "_componentRef",
    "uiCanExitFn",
    "uiCanExit",
    "call",
    "destroy",
    "_disposeLast",
    "trace",
    "traceUIViewConfigUpdated",
    "_applyUpdatedConfig",
    "changeDetectorRef",
    "markForCheck",
    "ResolveContext",
    "componentInjector",
    "_getComponentInjector",
    "componentClass",
    "compFactoryResolver",
    "ComponentFactoryResolver",
    "compFactory",
    "resolveComponentFactory",
    "_componentTarget",
    "createComponent",
    "_applyInputBindings",
    "getTokens",
    "getResolvable",
    "resolved",
    "newProviders",
    "data",
    "parentInject",
    "PARENT_INJECT",
    "parentComponentInjector",
    "moduleInjector",
    "mergedParentInjector",
    "ReflectiveInjector",
    "resolveAndCreate",
    "bindings",
    "explicitBoundProps",
    "renamedInputProp",
    "find",
    "explicitInputTuples",
    "acc",
    "key",
    "implicitInputTuples",
    "tuple",
    "addResolvable",
    "resolvable",
    "type",
    "Component",
    "args",
    "selector",
    "exportAs",
    "template",
    "decorators",
    "Inject",
    "ViewContainerRef",
    "ViewChild",
    "read",
    "Input",
    "_name",
    "_el",
    "_renderer",
    "AnchorUISref",
    "nativeElement",
    "target",
    "href",
    "setProperty",
    "removeAttribute",
    "Directive",
    "ElementRef",
    "Renderer2",
    "_router",
    "_anchorUISref",
    "ReplaySubject",
    "_statesSub",
    "states$",
    "subscribe",
    "update",
    "UISref",
    "params",
    "options",
    "_emit",
    "changes",
    "unsubscribe",
    "targetState$",
    "$state",
    "newTarget",
    "getOptions",
    "next",
    "defaultOpts",
    "relative",
    "inherit",
    "source",
    "extend",
    "openInNewTab",
    "go",
    "host",
    "(click)",
    "Optional",
    "inactiveStatus",
    "exists",
    "targetParamVals",
    "targetPath",
    "buildPath",
    "paramSchema",
    "param",
    "hasOwnProperty",
    "tailNode",
    "tail",
    "paramValues",
    "Param",
    "equals",
    "_globals",
    "EventEmitter",
    "status",
    "assign",
    "UISrefStatus",
    "transEvents$",
    "switchMap",
    "start$",
    "transStart$",
    "of",
    "transResult",
    "transFinish$",
    "fromPromise",
    "_srefs$",
    "BehaviorSubject",
    "_srefs",
    "toArray",
    "_srefChangesSub",
    "srefs",
    "targetStates$",
    "combineLatest",
    "sref",
    "_subscription",
    "targets",
    "getSrefStatus",
    "mergeSrefStatus",
    "_setStatus",
    "uiSrefStatus",
    "emit",
    "UIRouterGlobals",
    "Output",
    "ContentChildren",
    "descendants",
    "rnd",
    "_classes",
    "cls",
    "setElementClass",
    "_classesEq",
    "UISrefActive",
    "split",
    "Renderer",
    "Host",
    "activeEq",
    "_UIROUTER_DIRECTIVES",
    "UIROUTER_DIRECTIVES",
    "InjectionToken",
    "UIROUTER_STATES",
    "UIRouterModule",
    "ngModule",
    "providers",
    "_UIROUTER_INSTANCE_PROVIDERS",
    "_UIROUTER_SERVICE_PROVIDERS",
    "makeRootProviders",
    "makeChildProviders",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "p",
    "_locationStrategy",
    "isBrowser",
    "_super",
    "onPopState",
    "_listener",
    "tslib_1.__extends",
    "replace",
    "getBaseHref",
    "title",
    "url",
    "_a",
    "search",
    "hash",
    "urlWithHash",
    "replaceState",
    "pushState",
    "dispose",
    "BaseLocationServices",
    "is",
    "BrowserLocationConfig",
    "uiRouterFactory",
    "Injector",
    "parentUIViewInjectFactory",
    "StateRegistry",
    "StateService",
    "fnStateService",
    "fnTransitionService",
    "UrlMatcherFactory",
    "fnUrlMatcherFactory",
    "UrlRouter",
    "fnUrlRouter",
    "UrlService",
    "fnUrlService",
    "fnViewService",
    "fnStateRegistry",
    "fnGlobals",
    "UIROUTER_PROVIDERS"
  ],
  "mappings": "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"
}