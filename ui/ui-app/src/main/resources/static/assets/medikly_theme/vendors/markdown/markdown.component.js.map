{"version":3,"file":"markdown.component.js","sourceRoot":"","sources":["../../../src/platform/markdown/markdown.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, AfterViewInit, ElementRef, Input, Output, EventEmitter, Renderer2, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\ndeclare var showdown: any;\n\n@Component({\n  selector: 'td-markdown',\n  styleUrls: ['./markdown.component.scss'],\n  templateUrl: './markdown.component.html',\n})\nexport class TdMarkdownComponent implements AfterViewInit {\n\n  private _content: string;\n\n  /**\n   * content?: string\n   *\n   * Markdown format content to be parsed as html markup.\n   * Used to load data dynamically.\n   *\n   * e.g. README.md content.\n   */\n  @Input('content')\n  set content(content: string) {\n    this._content = content;\n    this._loadContent(this._content);\n  }\n\n  /**\n   * contentReady?: function\n   * Event emitted after the markdown content rendering is finished.\n   */\n  @Output('contentReady') onContentReady: EventEmitter<undefined> = new EventEmitter<undefined>();\n\n  constructor(private _renderer: Renderer2,\n              private _elementRef: ElementRef,\n              private _domSanitizer: DomSanitizer) {}\n\n  ngAfterViewInit(): void {\n    if (!this._content) {\n      this._loadContent((<HTMLElement>this._elementRef.nativeElement).textContent);\n    }\n  }\n\n  /**\n   * General method to parse a string markdown into HTML Elements and load them into the container\n   */\n  private _loadContent(markdown: string): void {\n    if (markdown && markdown.trim().length > 0) {\n      // Clean container\n      this._renderer.setProperty(this._elementRef.nativeElement, 'innerHTML', '');\n      // Parse html string into actual HTML elements.\n      let divElement: HTMLDivElement = this._elementFromString(this._render(markdown));\n    }\n    this.onContentReady.emit();\n  }\n\n  private _elementFromString(markupStr: string): HTMLDivElement {\n    // Renderer2 doesnt have a parsing method, so we have to sanitize and use [innerHTML]\n    // to parse the string into DOM element for now.\n    const div: HTMLDivElement = this._renderer.createElement('div');\n    this._renderer.appendChild(this._elementRef.nativeElement, div);\n    div.innerHTML = this._domSanitizer.sanitize(SecurityContext.HTML, markupStr);\n    return div;\n  }\n\n  private _render(markdown: string): string {\n    // Trim leading and trailing newlines\n    markdown = markdown.replace(/^(\\s|\\t)*\\n+/g, '')\n                       .replace(/(\\s|\\t)*\\n+(\\s|\\t)*$/g, '');\n    // Split markdown by line characters\n    let lines: string[] = markdown.split('\\n');\n\n    // check how much indentation is used by the first actual markdown line\n    let firstLineWhitespace: string = lines[0].match(/^(\\s|\\t)*/)[0];\n\n    // Remove all indentation spaces so markdown can be parsed correctly\n    let startingWhitespaceRegex: RegExp = new RegExp('^' + firstLineWhitespace);\n    lines = lines.map(function(line: string): string {\n      return line.replace(startingWhitespaceRegex, '');\n    });\n\n    // Join lines again with line characters\n    let markdownToParse: string =  lines.join('\\n');\n\n    // Convert markdown into html\n    let converter: any = new showdown.Converter();\n    converter.setOption('ghCodeBlocks', true);\n    converter.setOption('tasklists', true);\n    converter.setOption('tables', true);\n    let html: string = converter.makeHtml(markdownToParse);\n    return html;\n  }\n\n}\n"]}